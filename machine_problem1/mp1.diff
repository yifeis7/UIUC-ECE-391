diff -Naur /workdir/orig/source/linux-2.6.22.5/drivers/char/Makefile ./drivers/char/Makefile
--- /workdir/orig/source/linux-2.6.22.5/drivers/char/Makefile	2007-08-26 09:00:00.000000000 -0500
+++ ./drivers/char/Makefile	2007-09-01 15:13:50.000000000 -0500
@@ -7,7 +7,7 @@
 #
 FONTMAPFILE = cp437.uni
 
-obj-y	 += mem.o random.o tty_io.o n_tty.o tty_ioctl.o
+obj-y	 += mem.o random.o tty_io.o n_tty.o tty_ioctl.o mp1.o
 
 obj-$(CONFIG_LEGACY_PTYS)	+= pty.o
 obj-$(CONFIG_UNIX98_PTYS)	+= pty.o
diff -Naur /workdir/orig/source/linux-2.6.22.5/drivers/char/rtc.c ./drivers/char/rtc.c
--- /workdir/orig/source/linux-2.6.22.5/drivers/char/rtc.c	2007-08-26 09:00:00.000000000 -0500
+++ ./drivers/char/rtc.c	2007-09-01 20:02:29.000000000 -0500
@@ -101,6 +101,9 @@
 #undef	RTC_IRQ
 #endif
 
+extern asmlinkage void mp1_rtc_tasklet(unsigned long);
+extern asmlinkage int mp1_ioctl(unsigned long arg, unsigned int cmd);
+
 #ifdef RTC_IRQ
 static int rtc_has_irq = 1;
 #endif
@@ -211,6 +214,34 @@
 static const unsigned char days_in_mo[] = 
 {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 
+/* Global variable pointing to the upper-left character in
+ * the text-mode video buffer.  Used by mp1.S to write chars to the screen */
+char *vmem_base_addr;
+
+/* Since the actual copy_to_user and copy_from_user are C macros,
+ * we can't call them by that name directly from assembly. */
+unsigned asmlinkage long mp1_copy_from_user(void *to, const void *from, unsigned long n)
+{
+  return copy_from_user(to, from, n);
+}
+
+unsigned asmlinkage long mp1_copy_to_user(void *to, const void *from, unsigned long n)
+{
+  return copy_to_user(to, from, n);
+}
+
+/* Kernel wrappers for memory allocation */
+void* asmlinkage mp1_malloc(unsigned long size)
+{
+    return kmalloc(size, GFP_KERNEL);
+}
+
+void asmlinkage mp1_free(void *ptr)
+{
+    kfree(ptr);
+}
+
+
 /*
  * Returns true if a clock update is in progress
  */
@@ -226,6 +257,10 @@
 }
 
 #ifdef RTC_IRQ
+
+/* Student's tasklet */
+static DECLARE_TASKLET(mp1_rtc_tasklet_struct, mp1_rtc_tasklet, 0);
+
 /*
  *	A very tiny interrupt handler. It runs with IRQF_DISABLED set,
  *	but there is possibility of conflicting with the set_rtc_mmss()
@@ -264,6 +299,9 @@
 
 	spin_unlock (&rtc_lock);
 
+	/* Schedule the MP1 tasklet to run later */
+	tasklet_schedule(&mp1_rtc_tasklet_struct);
+
 	/* Now do the rest of the actions */
 	spin_lock(&rtc_task_lock);
 	if (rtc_callback)
@@ -410,6 +448,10 @@
 		case RTC_UIE_ON:
 		case RTC_IRQP_READ:
 		case RTC_IRQP_SET:
+		case RTC_ADD:
+		case RTC_REMOVE:
+		case RTC_FIND:
+		case RTC_SYNC:
 			return -EINVAL;
 		};
 	}
@@ -693,6 +735,15 @@
 		epoch = arg;
 		return 0;
 	}
+	case RTC_ADD: /* Add a blinking character */
+		return mp1_ioctl(arg, 0);
+	case RTC_REMOVE: /* Remove a blinking character */
+		return mp1_ioctl(arg, 1);
+	case RTC_FIND: /* Find blink parameters associated with that location */
+		return mp1_ioctl(arg, 2);
+	case RTC_SYNC: /* Sync two blinking locations */
+		return mp1_ioctl(arg, 3);
+
 	default:
 		return -ENOTTY;
 	}
@@ -1094,6 +1145,9 @@
 
 	(void) init_sysctl();
 
+	/* Map video memory into the kernel's virtual address space */
+	vmem_base_addr = ioremap(0xb8000, 4000);
+
 	printk(KERN_INFO "Real Time Clock Driver v" RTC_VERSION "\n");
 
 	return 0;
diff -Naur /workdir/orig/source/linux-2.6.22.5/include/linux/rtc.h ./include/linux/rtc.h
--- /workdir/orig/source/linux-2.6.22.5/include/linux/rtc.h	2007-08-26 09:00:00.000000000 -0500
+++ ./include/linux/rtc.h	2007-09-01 15:07:03.000000000 -0500
@@ -39,6 +39,18 @@
 	struct rtc_time time;	/* time the alarm is set to */
 };
 
+/* Struct to support blinking characters on a text-mode video screen for MP1
+ * Gets passed in to RTC_ADD and RTC_FIND ioctls */
+struct mp1_blink_struct {
+  unsigned short location;
+  char on_char; 
+  char off_char;
+  unsigned long on_length;
+  unsigned long off_length;
+  unsigned long countdown;
+  struct mp1_blink_struct* next;
+} __attribute((packed)); 
+
 /*
  * Data structure to control PLL correction some better RTC feature
  * pll_value is used to get or set current value of correction,
@@ -91,6 +103,11 @@
 #define RTC_PLL_GET	_IOR('p', 0x11, struct rtc_pll_info)  /* Get PLL correction */
 #define RTC_PLL_SET	_IOW('p', 0x12, struct rtc_pll_info)  /* Set PLL correction */
 
+#define RTC_ADD _IOR('p', 0x13, struct mp1_blink_struct *) /* Add a blinking character */
+#define RTC_REMOVE _IOR('p', 0x14, unsigned long) /* Remove a blinking character */
+#define RTC_FIND _IOW('p', 0x15, struct mp1_blink_struct *) /* Get info about a blink location */
+#define RTC_SYNC _IOR('p', 0x16, unsigned long) /* Sync two blink locations */
+
 /* interrupt flags */
 #define RTC_IRQF 0x80 /* any of the following is active */
 #define RTC_PF 0x40
